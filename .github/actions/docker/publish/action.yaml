# Copyright (c) 2021 Fraunhofer IOSB, eine rechtlich nicht selbstaendige
# Einrichtung der Fraunhofer-Gesellschaft zur Foerderung der angewandten
# Forschung e.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Docker publish

inputs:
  registry_name:
    description: 'The docker registry URL'
    default: "ghcr.io"
  organisation_name:
    description: 'The docker registry organisation'
  project_name:
    description: 'The project name in the docker registry'
    default: "edc-extension4aas"
  docker_username:
    description: 'Docker registry username'
  docker_token:
    description: 'Docker registry token'

runs:
  using: "composite"
  steps:
    - name: Set up JDK
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Build project and docker image
      uses: ./.github/actions/setup/build
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_token }}
    - name: Push docker image to DockerHub
      shell: bash
      env:
        REGISTRY: ${{ inputs.registry_name }}
        ORG: ${{ inputs.organisation_name || github.repository_owner }}
        PROJECT: ${{ inputs.project_name }}
      run: |
        set -euo pipefail
    
        ORG_LC="${ORG,,}"
        PROJECT_LC="${PROJECT,,}"
        REMOTE_REPO="${REGISTRY}/${ORG_LC}/${PROJECT_LC}"

        echo "Publishing local 'provider' image tags to ${REMOTE_REPO} ..."

        # Find all tags for local image 'provider'
        mapfile -t TAGS < <(docker images provider --format "{{.Tag}}" | grep -v '<none>' || true)
        if [ "${#TAGS[@]}" -eq 0 ]; then
          echo "No local tags found for image 'provider'." >&2
          exit 1
        fi

        # Push locally tagged images
        for TAG in "${TAGS[@]}"; do
          echo "Pushing tag: ${TAG}"
          docker tag "provider:${TAG}" "${REMOTE_REPO}:${TAG}"
          docker push "${REMOTE_REPO}:${TAG}"
        done